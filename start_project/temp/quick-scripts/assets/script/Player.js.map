{"version":3,"sources":["Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","accLeft","accRight","xSpeed","jumpAudio","default","url","AudioClip","getAccLeft","onLoad","console","log","jumpAction","setJumpAction","node","runAction","start","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","update","dt","Math","abs","x"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAW;AAAA,eAAK;AACZ;AACAC,wBAAW,CAFC;AAGZ;AACAC,0BAAa,CAJD;AAKZ;AACAC,0BAAa,CAND;AAOZ;AACAC,mBAAM,CARM;AASZ;AACAC,qBAAQ,KAVI;AAWZC,sBAAS,KAXG;AAYZC,oBAAO,CAZK;AAaZ;AACAC,uBAAU;AACNC,yBAAQ,IADF;AAENC,qBAAId,GAAGe;AAFD;AAdE,SAAL;AAAA,KAHN;;AAuBLC,gBAAW,sBAAY;AACrB,eAAO,KAAKP,OAAZ;AACD,KAzBI;AA0BLQ,YAAO,kBAAW;AACdC,gBAAQC,GAAR,CAAY,MAAZ;AACA;AACA,aAAKC,UAAL,GAAkB,KAAKC,aAAL,EAAlB;AACA,aAAKC,IAAL,CAAUC,SAAV,CAAoB,KAAKH,UAAzB;AAEH,KAhCI;;AAkCLI,WAAM,iBAAW,CAEhB,CApCI;;AAsCL;;;AAGAH,mBAAc,yBAAU;AACpB;;;;;;;;AAQA;AACA,YAAII,SAASzB,GAAG0B,MAAH,CAAU,KAAKpB,YAAf,EAA6BN,GAAG2B,CAAH,CAAK,CAAL,EAAQ,KAAKtB,UAAb,CAA7B,EAAuDuB,MAAvD,CAA8D5B,GAAG6B,kBAAH,EAA9D,CAAb;AACA;AACA,YAAIC,WAAW9B,GAAG0B,MAAH,CAAU,KAAKpB,YAAf,EAA6BN,GAAG2B,CAAH,CAAK,CAAL,EAAQ,CAAC,KAAKtB,UAAd,CAA7B,EAAwDuB,MAAxD,CAA+D5B,GAAG+B,iBAAH,EAA/D,CAAf;AACA;AACA,YAAIC,WAAWhC,GAAGiC,QAAH,CAAY,KAAKC,aAAjB,EAAgC,IAAhC,CAAf;AACA;AACAhB,gBAAQC,GAAR,CAAY,cAAZ;AACA,eAAOnB,GAAGmC,aAAH,CAAiBnC,GAAGoC,QAAH,CAAYX,MAAZ,EAAoBK,QAApB,EAA6BE,QAA7B,CAAjB,CAAP;AACH,KA3DI;;AA6DL;;;AAGAE,mBAAc,yBAAU;AACpB;AACAlC,WAAGqC,WAAH,CAAeC,UAAf,CAA0B,KAAK1B,SAA/B,EAA0C,KAA1C;AAEH,KApEI;;AAsEL2B,YAAO,gBAASC,EAAT,EAAY;AACf;AACA;AACA;AACA,YAAI,KAAK/B,OAAT,EAAkB;AACd,iBAAKE,MAAL,IAAe,KAAKH,KAAL,GAAagC,EAA5B;AACH,SAFD,MAEO,IAAI,KAAK9B,QAAT,EAAmB;AACtB,iBAAKC,MAAL,IAAe,KAAKH,KAAL,GAAagC,EAA5B;AACH;;AAED;AACA,YAAKC,KAAKC,GAAL,CAAS,KAAK/B,MAAd,IAAwB,KAAKJ,YAAlC,EAAiD;AAC7C;AACA,iBAAKI,MAAL,GAAc,KAAKJ,YAAL,GAAoB,KAAKI,MAAzB,GAAkC8B,KAAKC,GAAL,CAAS,KAAK/B,MAAd,CAAhD;AACH;;AAED;AACA,aAAKW,IAAL,CAAUqB,CAAV,IAAe,KAAKhC,MAAL,GAAc6B,EAA7B;AAEH;AAzFI,CAAT","file":"Player.js","sourceRoot":"../../../../assets/script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n/**\n * 节点\n *  节点是承载组件的实体\n *\n */\n\ncc.Class({\n    extends: cc.Component,\n\n    properties:()=>({\n        //主角跳跃高度\n        jumpHeight:0,\n        //主角跳跃持续时间\n        jumpDuration:0,\n        //最大的移动速度\n        maxMoveSpeed:0,\n        //加速度\n        accel:0,\n        // 加速度方向开关\n        accLeft:false,\n        accRight:false,\n        xSpeed:0,\n        //跳跃音效\n        jumpAudio:{\n            default:null,\n            url:cc.AudioClip,\n        }\n    }),\n\n    getAccLeft:function () {\n      return this.accLeft;\n    },\n    onLoad:function() {\n        console.log('加载游戏');\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n    },\n\n    start:function() {\n\n    },\n\n    /**\n     * 跳跃的方法\n     */\n    setJumpAction:function(){\n        /**\n         * 在duration时间内，相对当前位置基础上移动x，y个单位。\n         * moveBy(duration,x,y)函数,移动指定距离,相对移动\n         *\n         * easing()减速\n         *\n         *\n         */\n        // 跳跃上升\n        let jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        let jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        let callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        console.log(\"不断重复上跳和下落的过程\");\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown,callback));\n    },\n\n    /**\n     * 播放跳跃音效\n     */\n    playJumpSound:function(){\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n\n    },\n\n    update:function(dt){\n        //duration time表示每帧之间的间隔时间\n        // 根据当前加速度方向每帧更新速度\n        // console.log(this.accLeft);\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        // 限制主角的速度不能超过最大值\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n\n    },\n});\n\n\n\n\n"]}